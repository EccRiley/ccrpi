help(package="roxygen2")
library(roxygen2)
install.packages("roxygen2")
?roxygenise
library(roxygen2)
?roxygenise
roxygenise()
install.packages("magrittr")
install.packages("data.table")
.Riley()
install.packages("devtools")
.Riley()
install.packages("ggsci")
.Riley()
install.packages("knitr")
.Riley()
install.packages("vennDiagram")
install.packages("VennDiagram")
.Riley()
install.packages("venneuler")
.Riley()
install.packages("package")
install.packages("pander")
.Riley()
install.packages("ggthemes")
.Riley()
roxygenise()
install.packages("magrittr")
?rnorm
library(data.table)
x <- data.table(ltrs = sample(letters, size = length(letters), replace = TRUE),
num_1 = 1:length(letters),
num_2 = rnorm(length(letters), mean = 0.5),
)
x <- data.table(ltrs = sample(letters, size = length(letters), replace = TRUE),
num_1 = 1:length(letters),
num_2 = rnorm(length(letters), mean = 0.5))
x
testvar <- expression(ltrs)
testvar
x[testvar]
x[eval(testvar)]
f <- function(x, v, condition) {
x[v == condition]
}
f <- function(x, v, val) {
x[v == condition]
}
table(x$ltrs)
f(x = x, v = ltrs, val = "b")
f <- function(x, v, val) {
x[substitute(v) == condition]
}
f(x = x, v = ltrs, val = "b")
f <- function(x, v, val) {
x[substitute(v) == val]
}
f(x = x, v = ltrs, val = "b")
f <- function(x, v, val) {
x[v == val]
}
f(x = x, v = ltrs, val = "b")
x[v == val]
f <- function(x, v, val) {
x[v == val]
}
f(x = x, v = "ltrs", val = "b")
f <- function(x, v, val) {
x[substitute(v) == val]
}
f(x = x, v = "ltrs", val = "b")
x[ltrs == "b"]
f <- function(x, v, val) {
x[x$v == val]
}
f(x = x, v = "ltrs", val = "b")
f(x = x, v = ltrs, val = "b")
x
f <- function(x, v, val) {
return(x[x$v == val])
}
f(x = x, v = ltrs, val = "b")
f <- function(x, v, val) {
return(copy(x[x$v == val]))
}
f(x = x, v = ltrs, val = "b")
x <- data.frame(ltrs = sample(letters, size = length(letters), replace = TRUE),
num_1 = 1:length(letters),
num_2 = rnorm(length(letters), mean = 0.5))
x
f <- function(x, v, val) {
x[x$v == val]
}
f(x = x, v = "ltrs", val = "b")
f(x = x, v = ltrs, val = "b")
f(x = x, v = x$ltrs, val = "b")
f <- function(x, v, val) {
x[v == val]
}
f(x = x, v = x$ltrs, val = "b")
f <- function(x, v, val) {
x[v == val, ]
}
f(x = x, v = x$ltrs, val = "b")
x
table(x$ltr)
f <- function(x, v, val) {
x[v == val, ]
}
f(x = x, v = x$ltrs, val = "e")
f(x = x, v = "ltrs", val = "e")
f <- function(x, v, val) {
x[x[[v]] == val, ]
}
f(x = x, v = "ltrs", val = "e")
x
x <- data.table(ltrs = sample(letters, size = length(letters), replace = TRUE),
num_1 = 1:length(letters),
num_2 = rnorm(length(letters), mean = 0.5))
table(x$ltrs)
f(x = x, v = "ltrs", val = "w")
f <- function(x, v, val) {
x[x[[v]] == val]
}
f(x = x, v = "ltrs", val = "w")
newvar <- "new_var"
x
x$newvar <- "newvar"
x
x[[newvar2]] <- "newvar"
x[[newvar]] <- "newvar"
x[[newvar]] <- "newvar222"
x
table(x$ltrs)
x[, LTRS := car::recode(x[[ltrs]], c("'w'=99"))]
x[, LTRS := car::recode(x[["ltrs"]], c("'w'=99"))]
x
AchPts_Wgtd
?roxygenise
?lm
roxygenise()
?roxygenise
roxygenise()
?lm
roxygenise()
roxygen2::roxygenise()
file.edit("R/Rach.R")
roxygen2::roxygenise()
#' \emph{Content Mastery} Subject-Area Indicators' Points
#'
#' Compute subject-area indicator points for the \emph{Content Mastery CCRPI} component, overall (per individual school, or across multiple schools within the same gradeband) or by subgroup(s).
#'
#' @param x A \code{dataframe} or object coercible to a \code{dataframe} containing \emph{\strong{student-level} GA Milestones} data containing all necessary columns (see additional arguments below) for computing \emph{\strong{school-level} Content Mastery} points for a single subject-area indicator.
#' @param gradeband A character vector of length 1 specifying the focal gradeband as one of the following: "ES" for elementary schools (grades 3 - 5), "MS" for middle schools (grades 6 - 8), or "HS" (grades 9 - 12).
#' @param grade_var A character vector of length 1 specifying the column name in \code{x} containing students' grade level
#' @param subject A character vector of length 1 specifying the focal subject area s one of the following: "ELA" for English/Language Arts, "MATH" for Mathematics, "SCI" for Science, or "SS" for Social Studies.
#' @param subject_var A character vector of length 1 specifying the column name in \code{x} containing the appropriate subject area codes.
#' @param subject_code A character vector specifying the actual codes used in \code{x$subject_var} for the subject area specified in \code{subject}.
#' @param assessment_type_var A character vector of length 1 specifying the column name in \code{x} containing the assessment types (e.g., "EOG", "EOC", "GAA", etc.).
#' @param assessment_type_codes A character vector specifying the acceptable values of \code{assessment_type_var} for use in computing content mastery scores.
#' @param fay_var A character vector of length 1 specifying the column name in \code{x} containing the \emph{FAY Participant} filter.
#' @param fay_code A character vector specifying acceptable values of \code{fay_var} for the \emph{FAY} filter.
#' @param performance_code_var A character vector of length 1 specifying the column name in \code{x} containing the assessment performance codes (e.g., "BEG", "DEV", "PRO", "DIS").
#' @param valid_performance_codes A character vector specifying the acceptable performance code values under \code{performance_code_var}.
#' @param rec.cmlvls A character vector of (pseudo) length 1 providing the \code{'recodes'} string to be passed to \code{\link[car]{car::recode()}} for the re-labeling \emph{Content Mastery} achievement levels.
#' @param rec.cmpnts A character vector of (pseudo) length 1 providing the \code{'recodes'} string to be passed to \code{\link[car]{car::recode()}} for assigning point values corresponding to the \emph{Content Mastery} achievement levels.
#' @param group_var An \emph{optional} character vector specifying the column name in \code{x} containing the appropriate variable for the focal subgroup (see \emph{Details} and \code{\link{Rcgpts}}).
#' @param group A character vector specifying the appropriate subgroup under \code{group_var} (ignored if \code{group_var} is \code{NULL}).
#' @param return_new_x logical. If \code{TRUE} (the default), the final returned value is a list containing (1) the manipulated version of the input dataframe (`x`), for QC purposes, and (2) the computed subject-level \emph{Content Mastery} points dataframe.
#' @param ... Additional arguments \emph{not yet implemented}.
#'
#' @return A list containing the following components:
#'
#' \enumerate{
#'     \item \code{\strong{'new_x'}}: The final `dataframe` used in computing the subject-area's \emph{Content Mastery} scores. The list below provides the columns included in \strong{\code{'new_x'}} and whether each column is from the original input dataframe \strong{\code{'x'}}, and if so any manipulations performed on the data in the column, or was computed as part of the process for computing the final scores. The primary differences between \strong{\code{'new_x'}} and the input \strong{\code{'x'}} dataframe is the added \code{\emph{"osa.performance.lvl"}} and \code{\emph{"ccrpi.points"}} columns. The former is a relabeled version of \code{x[["osa.performance.code"]]}, while \code{\emph{"ccrpi.points"}} contains the point-value assignment corresponding to each students' achievement level (per user-specified .
#'     \item \code{\strong{'cm.subj'}}: A dataframe containing the computed \emph{Content Mastery} score(s) for the user-specified subject-area and gradeband. The table below provides additional details on the columns returned in this dataframe.
#' }
#'
#' \tabular{rlll}{
#'   [,1] \tab school.id \tab integer \tab School ID number from \code{\strong{'x'}} \cr
#'   [,2] \tab N_Students.SUBJ \tab integer \tab Number of students with valid test scores \cr
#'   [,3] \tab SumPts.SUBJ \tab double \tab Count of achievement points earned across test takers \cr
#'   [,4] \tab AchPts.SUBJ \tab double \tab Subject-area \emph{achievement points} computed as \eqn{\frac{"ccrpi.points"}{"N_Students.SUBJ"}{"ccrpi.points"/"N_Students.SUBJ"}} (see \code{'new_x[["ccrpi.points"]]'} description above) \cr
#'   [,5] \tab AchPts_Cpd.SUBJ \tab double \tab \code{AchPts.SUBJ}, capped at 1.000 point (analygous 100%) \cr
#'   [,6] \tab AchPts_Wgtd.SUBJ \tab double \tab \code{AchPts_Cpd.SUBJ} weighted according to gradeband-specific weighting rules for the focal subject-area indicator \cr
#' }
#'
#' @export
Rach <- function(x, gradeband, grade_var = "student.grade.level",
subject_var, subject, subject_code,
assessment_type_var,
assessment_type_codes = c("EOG", "EOC", "GAA"),
fay_var, fay_code = "Y",
performance_code_var = "osa.performance.code",
valid_performance_codes = c("BEG", "DNM", "DEV", "PRO", "ADV", "DIS"),
rec_cmlvls = c("'BEG' = 'L1'; 'DNM' = 'L1'; 'DEV' = 'L2'; 'PRO' = 'L3'; 'ADV' = 'L3'; 'DIS' = 'L4'"),
rec_cmpnts = c("'BEG' = 0; 'DNM' = 0; 'DEV' = 0.5; 'PRO' = 1; 'ADV' = 1; 'DIS' = 1.5"),
group_var = NULL, group = NULL, return_new_x = TRUE, ...) {
## 'newxvars': LIST OF ALL ESSENTIAL VARS (INCL. SUBGROUPS' VARS) FOR CONTENT MASTERY OUTPUT DF ##
newxvars <- c("school.id", "school.name", "school.year", "N_Students", "gtid",
"fay.participant", grade_var, "gender.code", "race.code", "el", "ed", "swd", "all",
assessment_type_var, performance_code_var, "osa.performance.lvl",
"SumPts", "AchPts", "AchPts_Cpd", "AchPts_Wgtd", "ccrpi.points")
## NOTE: ['SumPts', 'AchPts', 'AchPts_Cpd', 'AchPts_Wgtd', & 'CCRPI_POINTS'] ARE CREATED BELOW ##
### RESTRICT X TO SPECIFIED GROUP (IF APPLICABLE) ####
if (!is.null(group_var)) {
x <- x[group_var == group, ] %>% droplevels()
}
### FILTER ON FAY & FOCAL SUBJECT AREA ####
## (... & CREATE 'new_x' AS A DATA.TABLE-CLASSED COPY OF 'x', RETAINING ONLY VARIABLES CM-RELEVANT) ##
new_x <- x[x[[fay_var]] == fay_code & x[[subject_var == subject_code]],
names(x) %in% newxvars, drop = FALSE]
library(data.table)
### RESTRICT TO VALID ASSESSMENT TYPES ('assessment_type_var'): ####
new_x <- new_x[new_x[[assessment_type_var]] %in% assessment_type_codes]
### RESTRICT TO APPROPRIATE GRADE LEVELS BASED ON USER-SPECIFIED GRADEBAND ####
if (gradeband == "MS") {
## HIGH SCHOOLS ##
new_x <- new_x[x[[grade_var]] %in% c(6, 7, 8)]
} else  if (gradeband == "HS") {
## MIDDLE SCHOOLS ##
new_x <- new_x[x[[grade_var]] >= 9]
} else if (gradeband == "ES") {
## ELEMENTARY SCHOOLS ##
new_x <- new_x[x[[grade_var]] <= 5]
} else stop("Unusable Grade Band")
### RESTRICT TO VALID ACHIEVEMENT LEVEL CODES ####
new_x <- new_x[x[[performance_code_var]] %in% valid_performance_codes]
### RECODE OSA.PERFORMANCE.CODE ####
## (... TO ENSURE THAT THE ACH-PT LEVELS ARE ORDERED CORRECTLY IN TABULATED OUTPUTS LATER) ##
new_x[, performance.lvl := car::recode(x[[performance_code_var]], rec.cmlvls)] ## SEE 'rec.cmlvls' DEF ABOVE ##
### CREATE NEW "ccrpi.points" COLUMN (PER D.JAFFE) <==> EACH STUDENT'S ACH. PTS. EARNED ON THE INPUT SUBJ. ##
new_x[, ccrpi.points := car::recode(x[[performance_code_var]], rec.cmpnts)] ## SEE 'rec.cmpnts' DEF ABOVE ##
cm.subj <- new_x[, .(N_Students = .N, ## COMPUTE NUMBER OF VALID TEST RESULTS FOR THE FOCAL SUBJ. ##
SumPts = sum(ccrpi.points), ## COMPUTE TOTAL ACH.PTS. EARNED ON THE FOCAL SUBJ. ##
AchPts = sum(ccrpi.points)/.N), ## COMPUTE SUBJ. INDICATOR'S CCRPI PTS ##
by = key(new_x)] ## DO ALL OF THE ABOVE BY SCHOOL ##
### ... (NOTE: SUBJ. INDICATOR CCRPI PTS ARE COMPUTED AS A FUNCTION OF [TOTAL ACH.PTS. EARNED] DIVIDED BY  [NUMBER OF VALID TEST RESULTS] FOR THE FOCAL SUBJ. - THE RESULTING SCHOOL-LEVEL INDICATOR SCORE IS ROUNDED TO 2 DECIMAL PLACES, PER 2018 CALCULATION GUIDE) ###
## CAP SUBJ. INDICATOR ACHIEVEMENT POINTS AT 100% (i.e., 1.0pts) ##
cm.subj[, AchPts_Cpd := ifelse(AchPts >= 1.0000, 1, AchPts)]
## IMPLEMENT GRADEBAND-SPECIFIC RULES FOR CONTENT MASTERY COMPONENT SCORE WEIGHTS: ##
if (gradeband == 'HS') {
cmwgt <- 0.25
} else if (gradeband %in% c("MS", "ES")) {
if (subject %in% c("ELA", "MATH")) {
cmwgt <- 0.375
} else if (subject %in% c("SCI", "SS")) {
cmwgt <- 0.125
}
### APPLY CONTENT MASTERY WEIGHT (BASED ON GRADEBAND) TO CAPPED SUBJ. INDICATOR SCORES ####
cm.subj[, AchPts_Wgtd := AchPts_Cpd*cmwgt]
## APPEND SUBJ. LABEL TO COMPUTED VARIABLES' COLNAMES ##
names(cm.subj)[-1] <- paste0(names(cm.subj)[-1], ".", subject)
setnames(new_x, "ccrpi.points", paste0("ccrpi.points.", subject))
### RETURN OUTPUT(S) ####
## BY DEFAULT, 'new_x' DF IS RETURNED ALONG WITH CM.SUBJ. DF ##
if (return_new_x == TRUE) {
return(list(new_x = new_x, cm.subj = cm.subj))
} else return(cm.subj)
}
source('~/git/ccrpi/R/Rach.R', echo=TRUE)
source('~/git/ccrpi/R/Rcgpts.R', echo=TRUE)
source('~/git/ccrpi/R/Rcgpts_post.R', echo=TRUE)
source('~/git/ccrpi/R/Rcgpts_sgt.R', echo=TRUE)
source('~/git/ccrpi/R/Rcmbl.R', echo=TRUE)
Relp <- function(x, ids = c(school = "school.id", student = "gtid", group = "student.grade.level")) {
colnames(x) <- tolower(colnames(x)) ## PREEMPTIVELY FORCE ALL COLNAMES TO LOWER CASE ##
colnames(x) <- gsub("[\\.]{2,}", ".", colnames(x), perl = TRUE) ## PREEMPTIVELY CLEAN EXCESS CONSECUTIVE "."s (CAUSED BY EXCESS CONSECUTIVE WHITESPACES) IN x'S COLNAMES ##
## NOTE: DEF OF 'elpcols' BELOW ASSUMES THE FOLLOWING COLUMNS EXIST IN 'x': 'cscore.prior' = 'Prior Year Composite Score' ('Y'); 2. 'Prior Year Performance Band' ('Z'); 3. 'Current Year Composite Score' ('AA'); 4. 'Current Year Performance Band' ('AB') ##
## ALSO NOTE: THE BELOW-DEFINED 'elpcols' VAR IS PURELY 'COSMETIC', BUT THE ADDED CODE-READABILITY WILL BE USEFUL FOR ANY DEBUGGING NEEDED FOR THIS FUNCTION IN THE FUTURE ##
## ALSO ALSO NOTE: THE BELOW CODE CREATES A COPY OF THE INPUT DF, 'x', WHICH ALSO SERVES A PRIMARILY DEBUGGING-SPECIFIC PURPOSE ##
xnew <- plyr::rename(x, c("prior.year.composite.score" = "cscore.prior",
"prior.year.performance.band" = "pband.prior",
"current.year.composite.score" = "cscore.current",
"current.year.performance.band" = "pband.current"))
## IMPLEMENT ELP BUSINESS RULES (IT SHOULD BE CLEAR AT THIS POINT WHAT'S GOING ON IN THE NEXT CODE-CHUNK, IF NOT, THEN YOU HAVE NO BUSINESS EVALUATING/PROOFING THIS, OR ANY OTHER, CODE (IN ANY PROGRAMMING/SCRIPTING LANG)) ##
xnew <- within(xnew, {
ELP <- ifelse((pband.current <= pband.prior) & (cscore.current <= cscore.prior),
"L1", NA)
ELP <- ifelse((pband.current == pband.prior) & (cscore.current > cscore.prior),
"L2", ELP)
ELP <- ifelse((pband.current - pband.prior) == 1,
"L3", ELP)
ELP <- ifelse((pband.current - pband.prior) > 1,
"L4", ELP)
})
## THE REST IS ESSENTIALLY REPETITIVE OF PROCEDURES DONE VIA 'Rprgpts()', EXCEPT WITH NAMING CONVENTIONS SPECIFIC TO ELP, FOR NOW (TOOD: COMBINE Relp() & Rprgpts()) ##
# ## REMOVE ANY RESULTING DUPLICATES ##
xnew <- xnew[!duplicated(xnew), ]
## CREATE SUBSET DF ('xpts') OF 'xnew' CONTAINING ONLY ID VARS (SEE DEFAULT VALUES FOR THE 'ids' ARG FUN CALL LINE ABOVE) AND ELP POINT VAR (CREATED IN PREVIOUS CODE-CHUNK) ##
xpts <- xnew[, c(Runname(ids), "ELP")]
## SET 'ELP' POINTS VAR AS A FACTOR, TO RESTRICT TO ONLY VALID VALUES (ALL OTHERS WILL BE COERCED TO 'NA's, WHICH WILL RESULT IN A WARNING THAT CAN BE USED FOR DEBUGGING AS NEEDED, WHICH IS, IMO, THE ONLY REAL REASON FOR SETTING A VAR TO A FACTOR, SO LONG AS YOU HAVE A PREDETERMINED SET OF VALID VALUES, FYI) ##
xpts$ELP <- factor(xpts$ELP, levels = c(paste0("L", 1:4))) ## AGAIN, SEE 'ELP' VAR DEF ABOVE FOR REFERENCE ##
## RESHAPE 'xpts' TO WIDE FORMAT, WITH EACH COLUMN CONTAINING DATA FOR A UNIQUE SCHOOL (VIA 'school.id' BY DEFAULT), AND EACH ROW REPRESENTING A UNIQUE STUDENT'S (VIA 'gtid' BY DEFAULT) ELP POINT CONTRIBUTION (VIA 'ELP') PER GRADELEVEL/GROUP (VIA 'student.grade.level' BY DEFAULT) WITHIN A SCHOOL (AGAIN VIA 'school.id' BY DEFAULT)
xptsw <- reshape(xpts, v.names = c("ELP"), idvar = Runname(c(ids[c("student", "group")])), timevar = "school.id", direction = "wide")
## FYI [TLDR: 'Runname()' IS A UTILITY FUN IN MY 'Riley' R-PKG ... RUN '?is.atomic' FOR MORE)]: 'Runname() IS A UTILITY FUN FROM MY 'Riley' R-PKG THAT STRIPS THE NAMES ATTRIBUTE FROM A GIVEN OBJECT (WHICH PARTICULARLY IS HELPFUL IN SITUATIONS LIKE THIS WHERE YOU WANT TO BE ABLE TO CALL, INLINE/EN-VIVO, AN 'ATOMIC' OBJECT'S ELEMENTS BY NAME, WHILE MAINTAINING THE OBJECT'S 'ATOMIC' IMPLEMENTATION IN THE CONTEXT OF THE THE SURROUNDING CALL. RUN '?is.atomic' IN THE R CONSOLE FOR MORE) ##
## COMPUTE NUMERATOR FOR EACH SCHOOL'S FINAL ELP POINTS, I.E., TABULATED COUNTS OF UNIQUE 'ELP' VALUES (SEE PREVIOUS DEF OF 'ELP' COLUMN FOR REFERENCE) WITHIN EACH COLUMN (I.E., SCHOOL), EXCEPT FOR THE STUDENT & GROUP ID VARS (AGAIN, SEE ABOVE) ##
xpts_n0 <- sapply(xptsw[, -1:-2], table) %>%
t() ## TRANSPOSE THE RESULTING TABULATIONS DF SO THAT STUDENT-GRADE COMBOSE ARE NOW ON COLUMNS, AND SCHOOLS ON ROWS ##
## CREATE NEW DF CONTAINING (1) SCHOOL.IDs (BY STIPPING R'S DEFAULT ROWNAMES PREFIX RESULTING FROM THE ABOVE TWO PROCEDURES), & (2) THE TABULATIONS RESULTING FROM THE IMMEDIATELY-ABOVE CODE-CHUNK ##
xpts_n1 <- data.frame(school.id = gsub("ELP\\.", "", rownames(xpts_n0)), xpts_n0)
xpts_n1$n <- apply(xpts_n0, 1, sum) ## COMPUTE DENOMINATOR FOR EACH SCHOOL'S FINAL ELP POINTS, I.E., TOTAL NUMBER OF STUDENTS WITH VALID ELP POINTS PER SCHOOL ##
## COMPUTE EACH SCHOOL'S FINAL ELP POINTS USING THE ABOVE COMPUTED NUMERFATOR AND DENOMINATOR PER SCHOOL ##
xpts_p <- data.frame(school.id = xpts_n1[, 1], round((xpts_n0/xpts_n1$n)*100, 2))
## CLEAN UP FOR PRESENTATION ##
xpts_p1 <- data.frame(school.id = xpts_n1[, 1], apply(format(round((xpts_n0/xpts_n1$n)*100, 2), nsmall = 2), 2, Ras.percent)) ## RECODE EACH SCHOOL'S COMPUTED ELP POINTS AS A PRECENTAGE ##
# xpts_p1[, 3:6] <- apply(xpts_p1[, c], 2, function(x) ifelse(x == "NaN%", NA, x))
## MERGE THE RESULTING DF WITH THE 'fcs_schools' DF (SEE 'zmeta.R'), TO BRING IN SCHOOL NAMES ##
xpts_n <- merge(fcs_schools, xpts_n1, all.y = TRUE)
xpts_n <- xpts_n[!is.na(xpts_n$school.name), ] ## REMOVE ROWS WITH BLANK SCHOOL NAMES (CAUSED BY MERGE WITH FCS_SCHOOLS) ##
xpts_p <- merge(fcs_schools, xpts_p, all.y = TRUE)
xpts_p <- xpts_p[!is.na(xpts_p$school.name), ] ## REMOVE ROWS WITH BLANK SCHOOL NAMES (CAUSED BY MERGE WITH FCS_SCHOOLS) ##
xpts_p1 <- merge(fcs_schools, xpts_p1, all.y = TRUE)
xpts_p1 <- xpts_p[!is.na(xpts_p$school.name), ] ## REMOVE ROWS WITH BLANK SCHOOL NAMES (CAUSED BY MERGE WITH FCS_SCHOOLS) ##
return(list(xpts_n = xpts_n, xpts_p = xpts_p, xpts_p1 = xpts_p1))
} ## THE RETURNED RESULTS MUST BE RUN THROUGH THE 'Rprg()', DEFINED BELOW FUN TO IMPLEMENT ACTUAL POINT WEIGHTS FOR ACTUAL FINAL PRG.ELP INDICATOR CALCULATION ##
source('~/git/ccrpi/R/Rindicators.R', echo=TRUE)
source('~/git/ccrpi/R/Rlxmid.R', echo=TRUE)
source('~/git/ccrpi/R/Rprgpts.R', echo=TRUE)
source('~/git/ccrpi/R/test_datatable.R', echo=TRUE)
library(ccrpi)
devtools::install_github("EccRiley/ccrpi")
#' \tabular{rlll}{
#'   [,1] \tab school.id \tab integer \tab School ID number from \code{\strong{'x'}} \cr
#'   [,2] \tab N_Students.SUBJ \tab integer \tab Number of students with valid test scores \cr
#'   [,3] \tab SumPts.SUBJ \tab double \tab Count of achievement points earned across test takers \cr
#'   [,4] \tab AchPts.SUBJ \tab double \tab Subject-area \emph{achievement points} computed as \eqn{\frac{"ccrpi.points"}{"N_Students.SUBJ"}{"ccrpi.points"/"N_Students.SUBJ"}} (see \code{'new_x[["ccrpi.points"]]'} description above) \cr
#'   [,5] \tab AchPts_Cpd.SUBJ \tab double \tab \code{AchPts.SUBJ}, capped at 1.000 point (analygous 100%) \cr
#'   [,6] \tab AchPts_Wgtd.SUBJ \tab double \tab \code{AchPts_Cpd.SUBJ} weighted according to gradeband-specific weighting rules for the focal subject-area indicator \cr
#' }
#'
#' @export
Rach <- function(x, gradeband, grade_var = "student.grade.level",
subject, subject_var, subject_code,
assessment_type_var,
assessment_type_codes = c("EOG", "EOC", "GAA"),
fay_var, fay_code = "Y",
performance_code_var = "osa.performance.code",
valid_performance_codes = c("BEG", "DNM", "DEV", "PRO", "ADV", "DIS"),
rec_cmlvls = c("'BEG' = 'L1'; 'DNM' = 'L1'; 'DEV' = 'L2'; 'PRO' = 'L3'; 'ADV' = 'L3'; 'DIS' = 'L4'"),
rec_cmpnts = c("'BEG' = 0; 'DNM' = 0; 'DEV' = 0.5; 'PRO' = 1; 'ADV' = 1; 'DIS' = 1.5"),
group_var = NULL, group = NULL, return_new_x = TRUE, ...) {
## 'newxvars': LIST OF ALL ESSENTIAL VARS (INCL. SUBGROUPS' VARS) FOR CONTENT MASTERY OUTPUT DF ##
newxvars <- c("school.id", "school.name", "school.year", "N_Students", "gtid",
"fay.participant", grade_var, "gender.code", "race.code", "el", "ed", "swd", "all",
assessment_type_var, performance_code_var, "osa.performance.lvl",
"SumPts", "AchPts", "AchPts_Cpd", "AchPts_Wgtd", "ccrpi.points")
## NOTE: ['SumPts', 'AchPts', 'AchPts_Cpd', 'AchPts_Wgtd', & 'CCRPI_POINTS'] ARE CREATED BELOW ##
### RESTRICT X TO SPECIFIED GROUP (IF APPLICABLE) ####
if (!is.null(group_var)) {
x <- x[group_var == group, ] %>% droplevels()
}
### FILTER ON FAY & FOCAL SUBJECT AREA ####
## (... & CREATE 'new_x' AS A DATA.TABLE-CLASSED COPY OF 'x', RETAINING ONLY VARIABLES CM-RELEVANT) ##
new_x <- x[x[[fay_var]] == fay_code & x[[subject_var == subject_code]],
names(x) %in% newxvars, drop = FALSE]
new_x <- x[x[[fay_var]] == fay_code & x[[subject_var]] %in% subject_code, names(x) %in% newxvars] %>% droplevels()
### RESTRICT TO VALID ASSESSMENT TYPES ('assessment_type_var'): ####
new_x <- new_x[new_x[[assessment_type_var]] %in% assessment_type_codes]
### RESTRICT TO APPROPRIATE GRADE LEVELS BASED ON USER-SPECIFIED GRADEBAND ####
if (gradeband == "MS") {
## HIGH SCHOOLS ##
new_x <- new_x[x[[grade_var]] %in% c(6, 7, 8)]
} else  if (gradeband == "HS") {
## MIDDLE SCHOOLS ##
new_x <- new_x[x[[grade_var]] >= 9]
} else if (gradeband == "ES") {
## ELEMENTARY SCHOOLS ##
new_x <- new_x[x[[grade_var]] <= 5]
} else stop("Unusable Grade Band")
### RESTRICT TO VALID ACHIEVEMENT LEVEL CODES ####
new_x <- new_x[x[[performance_code_var]] %in% valid_performance_codes]
### RECODE OSA.PERFORMANCE.CODE ####
## (... TO ENSURE THAT THE ACH-PT LEVELS ARE ORDERED CORRECTLY IN TABULATED OUTPUTS LATER) ##
new_x[, performance.lvl := car::recode(x[[performance_code_var]], rec.cmlvls)] ## SEE 'rec.cmlvls' DEF ABOVE ##
### CREATE NEW "ccrpi.points" COLUMN (PER D.JAFFE) <==> EACH STUDENT'S ACH. PTS. EARNED ON THE INPUT SUBJ. ##
new_x[, ccrpi.points := car::recode(x[[performance_code_var]], rec.cmpnts)] ## SEE 'rec.cmpnts' DEF ABOVE ##
cm.subj <- new_x[, .(N_Students = .N, ## COMPUTE NUMBER OF VALID TEST RESULTS FOR THE FOCAL SUBJ. ##
SumPts = sum(ccrpi.points), ## COMPUTE TOTAL ACH.PTS. EARNED ON THE FOCAL SUBJ. ##
AchPts = sum(ccrpi.points)/.N), ## COMPUTE SUBJ. INDICATOR'S CCRPI PTS ##
by = key(new_x)] ## DO ALL OF THE ABOVE BY SCHOOL ##
### ... (NOTE: SUBJ. INDICATOR CCRPI PTS ARE COMPUTED AS A FUNCTION OF [TOTAL ACH.PTS. EARNED] DIVIDED BY  [NUMBER OF VALID TEST RESULTS] FOR THE FOCAL SUBJ. - THE RESULTING SCHOOL-LEVEL INDICATOR SCORE IS ROUNDED TO 2 DECIMAL PLACES, PER 2018 CALCULATION GUIDE) ###
## CAP SUBJ. INDICATOR ACHIEVEMENT POINTS AT 100% (i.e., 1.0pts) ##
cm.subj[, AchPts_Cpd := ifelse(AchPts >= 1.0000, 1, AchPts)]
## IMPLEMENT GRADEBAND-SPECIFIC RULES FOR CONTENT MASTERY COMPONENT SCORE WEIGHTS: ##
if (gradeband == 'HS') {
cmwgt <- 0.25
} else if (gradeband %in% c("MS", "ES")) {
if (subject %in% c("ELA", "MATH")) {
cmwgt <- 0.375
} else if (subject %in% c("SCI", "SS")) {
cmwgt <- 0.125
}
### APPLY CONTENT MASTERY WEIGHT (BASED ON GRADEBAND) TO CAPPED SUBJ. INDICATOR SCORES ####
cm.subj[, AchPts_Wgtd := AchPts_Cpd*cmwgt]
## APPEND SUBJ. LABEL TO COMPUTED VARIABLES' COLNAMES ##
names(cm.subj)[-1] <- paste0(names(cm.subj)[-1], ".", subject)
setnames(new_x, "ccrpi.points", paste0("ccrpi.points.", subject))
### RETURN OUTPUT(S) ####
## BY DEFAULT, 'new_x' DF IS RETURNED ALONG WITH CM.SUBJ. DF ##
if (return_new_x == TRUE) {
return(list(new_x = new_x, cm.subj = cm.subj))
} else return(cm.subj)
}
library(ccrpi)
